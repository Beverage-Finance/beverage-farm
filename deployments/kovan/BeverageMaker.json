{
  "address": "0x8A9B03013A9Ae73033165a961ADF15453ec66f57",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV2Factory",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bar",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_drink",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bridge",
          "type": "address"
        }
      ],
      "name": "LogBridgeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "server",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountSUSHI",
          "type": "uint256"
        }
      ],
      "name": "LogConvert",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IFeeSplitExtension",
          "name": "_feeSplitExtension",
          "type": "address"
        },
        {
          "internalType": "contract ISetToken",
          "name": "_setToken",
          "type": "address"
        }
      ],
      "name": "convert",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IFeeSplitExtension[]",
          "name": "_feeSplitExtensions",
          "type": "address[]"
        },
        {
          "internalType": "contract ISetToken[]",
          "name": "_setTokens",
          "type": "address[]"
        }
      ],
      "name": "convertMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bridge",
          "type": "address"
        }
      ],
      "name": "setBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "direct",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "renounce",
          "type": "bool"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf6503b6b7d8de45294ed049218ef81a24e8100341fa9da8749f8fcd8ade4ffee",
  "receipt": {
    "to": null,
    "from": "0x33Aa1681f6879Af074dcFbf5cAfa032e8eDCa1E2",
    "contractAddress": "0x8A9B03013A9Ae73033165a961ADF15453ec66f57",
    "transactionIndex": 0,
    "gasUsed": "917568",
    "logsBloom": "0x000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000010000000000000000000000000000800000000200200000000000c0000800000200000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x7017f72b10c2eea1f2599707fba703dec3c839997dfacf3c2ff992fb27d802b7",
    "transactionHash": "0xf6503b6b7d8de45294ed049218ef81a24e8100341fa9da8749f8fcd8ade4ffee",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 28098106,
        "transactionHash": "0xf6503b6b7d8de45294ed049218ef81a24e8100341fa9da8749f8fcd8ade4ffee",
        "address": "0x8A9B03013A9Ae73033165a961ADF15453ec66f57",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000033aa1681f6879af074dcfbf5cafa032e8edca1e2"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x7017f72b10c2eea1f2599707fba703dec3c839997dfacf3c2ff992fb27d802b7"
      }
    ],
    "blockNumber": 28098106,
    "cumulativeGasUsed": "917568",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc35DADB65012eC5796536bD9864eD8773aBc74C4",
    "0x2632E6d18c52bA47B5064B63A38B878Eb0c53d84",
    "0xF3a10Fe1593e351eb93DD560eA04d1eC4Bb2739F",
    "0xd0A1E359811322d97991E03f863a0C30C2cF029C"
  ],
  "solcInputHash": "216560149d15f06b25fc2a3e9a729058",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bar\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_drink\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"name\":\"LogBridgeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"server\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountSUSHI\",\"type\":\"uint256\"}],\"name\":\"LogConvert\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFeeSplitExtension\",\"name\":\"_feeSplitExtension\",\"type\":\"address\"},{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"}],\"name\":\"convert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFeeSplitExtension[]\",\"name\":\"_feeSplitExtensions\",\"type\":\"address[]\"},{\"internalType\":\"contract ISetToken[]\",\"name\":\"_setTokens\",\"type\":\"address[]\"}],\"name\":\"convertMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"name\":\"setBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BeverageMaker.sol\":\"BeverageMaker\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/BeverageMaker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\nimport \\\"./libraries/SafeMath.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\n\\nimport \\\"./uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./uniswapv2/interfaces/IUniswapV2Factory.sol\\\";\\n\\nimport \\\"./Ownable.sol\\\";\\n\\ninterface IFeeSplitExtension {\\n    function accrueFeesAndDistribute(ISetToken _setToken) external;\\n}\\n\\ninterface ISetToken is IERC20 {}\\n\\n\\n// BeverageMaker is MasterChef's left hand and kinda a wizard. He can make beverages from pretty much anything!\\n// This contract handles \\\"serving up\\\" rewards for xBVRG holders by trading tokens collected from Beverage indices fees for BVRG.\\ncontract BeverageMaker is Ownable {\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IUniswapV2Factory private immutable factory;\\n    \\n    address private immutable bar;\\n    \\n    address private immutable drink;\\n    \\n    address private immutable weth;\\n\\n    mapping(address => address) private _bridges;\\n\\n    event LogBridgeSet(address indexed token, address indexed bridge);\\n    event LogConvert(\\n        address indexed server,\\n        address indexed token0,\\n        uint256 amount0,\\n        uint256 amountSUSHI\\n    );\\n\\n    constructor(\\n        IUniswapV2Factory _factory,\\n        address _bar,\\n        address _drink,\\n        address _weth\\n    ) public {\\n        factory = _factory;\\n        bar = _bar;\\n        drink = _drink;\\n        weth = _weth;\\n    }\\n\\n    function setBridge(address token, address bridge) external onlyOwner {\\n        // Checks\\n        require(\\n            token != drink && token != weth && token != bridge,\\n            \\\"Maker: Invalid bridge\\\"\\n        );\\n        // Effects\\n        _bridges[token] = bridge;\\n        emit LogBridgeSet(token, bridge);\\n    }\\n\\n    modifier onlyEOA() {\\n        // Try to make flash-loan exploit harder to do by only allowing externally-owned addresses.\\n        require(msg.sender == tx.origin, \\\"Maker: Must use EOA\\\");\\n        _;\\n    }\\n\\n    function convert(IFeeSplitExtension _feeSplitExtension, ISetToken _setToken) external onlyEOA {\\n        _convert(_feeSplitExtension, _setToken);\\n    }\\n\\n    function convertMultiple(IFeeSplitExtension[] calldata _feeSplitExtensions, ISetToken[] calldata _setTokens) external onlyEOA {\\n        require(_feeSplitExtensions.length == _setTokens.length, \\\"Must be same length\\\");\\n\\n        for (uint256 i = 0; i < _setTokens.length; i++) {\\n            _convert(_feeSplitExtensions[i], _setTokens[i]);\\n        }\\n    }\\n\\n    function _convert(IFeeSplitExtension _beverageFeeSplitExtension, ISetToken _setToken) private {\\n        // accrue and distribute SetToken fees \\n        _beverageFeeSplitExtension.accrueFeesAndDistribute(_setToken);\\n\\n        address token0 = address(_setToken);\\n        \\n        // the fees is transferred to this contract hence reading balance is enough\\n        uint256 amount0 = IERC20(token0).balanceOf(address(this));\\n\\n        emit LogConvert(\\n            msg.sender,\\n            token0,\\n            amount0,\\n            _convertStep(token0, amount0)\\n        );\\n    }\\n\\n    function _convertStep(address token0, uint256 amount0) private returns (uint256 sushiOut) {\\n        if (token0 == drink) {\\n            IERC20(token0).safeTransfer(bar, amount0);\\n            sushiOut = amount0;\\n        } else if (token0 == weth) {\\n            sushiOut = _swap(token0, drink, amount0, bar);\\n        } else {\\n            address bridge = _bridges[token0];\\n            if (bridge == address(0)) {\\n                bridge = weth;\\n            }\\n            uint256 amountOut = _swap(token0, bridge, amount0, address(this));\\n            sushiOut = _convertStep(bridge, amountOut);\\n        }\\n    }\\n\\n    function _swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 amountIn,\\n        address to\\n    ) private returns (uint256 amountOut) {\\n        IUniswapV2Pair pair =\\n            IUniswapV2Pair(factory.getPair(fromToken, toToken));\\n        require(address(pair) != address(0), \\\"BeverageMaker: Cannot convert\\\");\\n\\n        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\n        uint256 amountInWithFee = amountIn.mul(997);\\n        \\n        if (toToken > fromToken) {\\n            amountOut =\\n                amountInWithFee.mul(reserve1) /\\n                reserve0.mul(1000).add(amountInWithFee);\\n            IERC20(fromToken).safeTransfer(address(pair), amountIn);\\n            pair.swap(0, amountOut, to, \\\"\\\");\\n        } else {\\n            amountOut =\\n                amountInWithFee.mul(reserve0) /\\n                reserve1.mul(1000).add(amountInWithFee);\\n            IERC20(fromToken).safeTransfer(address(pair), amountIn);\\n            pair.swap(amountOut, 0, to, \\\"\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13e88768484013cb782ac05991876c1176a9641f02e1c23003d08b0c27a4c757\",\"license\":\"MIT\"},\"contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\\n\\n// P1 - P3: OK\\npragma solidity 0.6.12;\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Edited by BoringCrypto\\n\\n// T1 - T4: OK\\ncontract OwnableData {\\n    // V1 - V5: OK\\n    address public owner;\\n    // V1 - V5: OK\\n    address public pendingOwner;\\n}\\n\\n// T1 - T4: OK\\ncontract Ownable is OwnableData {\\n    // E1: OK\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () internal {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    // F1 - F9: OK\\n    // C1 - C21: OK\\n    function transferOwnership(address newOwner, bool direct, bool renounce) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    // F1 - F9: OK\\n    // C1 - C21: OK\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    // M1 - M5: OK\\n    // C1 - C21: OK\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x2d3206aa7bcc1a8cad9f201d15a86c79cbc1fe60ddc73b5e458b3f0e76cc84a6\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    // EIP 2612\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\",\"keccak256\":\"0xbc2bbe46ffb84b39aa0e39c925b071e3a2ce6e912f7f216619550a38bbf0f9b3\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\nlibrary SafeERC20 {\\n    function safeSymbol(IERC20 token) internal view returns(string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x95d89b41));\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\n    }\\n\\n    function safeName(IERC20 token) internal view returns(string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x06fdde03));\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\n    }\\n\\n    function safeDecimals(IERC20 token) public view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x313ce567));\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    function safeTransfer(IERC20 token, address to, uint256 amount) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0xa9059cbb, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"SafeERC20: Transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, uint256 amount) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0x23b872dd, from, address(this), amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"SafeERC20: TransferFrom failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x0d6a8df0657b5b75deb4606cfa91035065a25f1ed407f8ad6240a78871b6f0ba\",\"license\":\"MIT\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n// a library for performing overflow-safe math, updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math)\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {require((c = a + b) >= b, \\\"SafeMath: Add Overflow\\\");}\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {require((c = a - b) <= a, \\\"SafeMath: Underflow\\\");}\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {require(b == 0 || (c = a * b)/b == a, \\\"SafeMath: Mul Overflow\\\");}\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= uint128(-1), \\\"SafeMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n}\\n\\nlibrary SafeMath128 {\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {require((c = a + b) >= b, \\\"SafeMath: Add Overflow\\\");}\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {require((c = a - b) <= a, \\\"SafeMath: Underflow\\\");}\\n}\\n\",\"keccak256\":\"0xf05f427c6f96fd491b23519a46531ad76d47d66316430eec1f586dd12ed7fb7e\",\"license\":\"MIT\"},\"contracts/uniswapv2/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setMigrator(address) external;\\n}\\n\",\"keccak256\":\"0xcaec675e6250bf4cd3364459a0cbf789262af2aaa377d61d4d463f657aea7b50\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0x08f9a63b34855eec941be8d36a04424f1a1725a2c030373fcef3afeb480ca385\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x61010060405234801561001157600080fd5b506040516110393803806110398339818101604052608081101561003457600080fd5b5080516020820151604080840151606090940151600080546001600160a01b0319163390811782559251949593949192917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36001600160601b0319606094851b811660805292841b831660a05290831b821660c05290911b1660e05260805160601c60a05160601c60c05160601c60e05160601c610f2b61010e600039806105a552806108ad528061095b525080610568528061083852806108eb52508061087f528061090d525080610b085250610f2b6000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146101845780639d22ae8c146101a8578063bd1b820c146101d6578063e30c3978146102045761007d565b8063078dfbe714610082578063303e6aa4146100ba5780634e71e0c81461017c575b600080fd5b6100b86004803603606081101561009857600080fd5b506001600160a01b0381351690602081013515159060400135151561020c565b005b6100b8600480360360408110156100d057600080fd5b8101906020810181356401000000008111156100eb57600080fd5b8201836020820111156100fd57600080fd5b8035906020019184602083028401116401000000008311171561011f57600080fd5b91939092909160208101903564010000000081111561013d57600080fd5b82018360208201111561014f57600080fd5b8035906020019184602083028401116401000000008311171561017157600080fd5b509092509050610348565b6100b8610436565b61018c6104f8565b604080516001600160a01b039092168252519081900360200190f35b6100b8600480360360408110156101be57600080fd5b506001600160a01b0381358116916020013516610507565b6100b8600480360360408110156101ec57600080fd5b506001600160a01b0381358116916020013516610698565b61018c6106f0565b6000546001600160a01b0316331461026b576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b8115610327576001600160a01b0383161515806102855750805b6102ce576040805162461bcd60e51b81526020600482015260156024820152744f776e61626c653a207a65726f206164647265737360581b604482015290519081900360640190fd5b600080546040516001600160a01b03808716939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b038516179055610343565b600180546001600160a01b0319166001600160a01b0385161790555b505050565b333214610392576040805162461bcd60e51b81526020600482015260136024820152724d616b65723a204d7573742075736520454f4160681b604482015290519081900360640190fd5b8281146103dc576040805162461bcd60e51b815260206004820152601360248201527209aeae6e840c4ca40e6c2daca40d8cadccee8d606b1b604482015290519081900360640190fd5b60005b8181101561042f576104278585838181106103f657fe5b905060200201356001600160a01b031684848481811061041257fe5b905060200201356001600160a01b03166106ff565b6001016103df565b5050505050565b6001546001600160a01b0316338114610496576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b039092166001600160a01b0319928316179055600180549091169055565b6000546001600160a01b031681565b6000546001600160a01b03163314610566576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316141580156105da57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b80156105f85750806001600160a01b0316826001600160a01b031614155b610641576040805162461bcd60e51b81526020600482015260156024820152744d616b65723a20496e76616c69642062726964676560581b604482015290519081900360640190fd5b6001600160a01b0382811660008181526002602052604080822080546001600160a01b0319169486169485179055517f2e103aa707acc565f9a1547341914802b2bfe977fd79c595209f248ae4b006139190a35050565b3332146106e2576040805162461bcd60e51b81526020600482015260136024820152724d616b65723a204d7573742075736520454f4160681b604482015290519081900360640190fd5b6106ec82826106ff565b5050565b6001546001600160a01b031681565b816001600160a01b031663b969b4bf826040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b15801561074e57600080fd5b505af1158015610762573d6000803e3d6000fd5b5050604080516370a0823160e01b81523060048201529051849350600092506001600160a01b038416916370a08231916024808301926020929190829003018186803b1580156107b157600080fd5b505afa1580156107c5573d6000803e3d6000fd5b505050506040513d60208110156107db57600080fd5b505190506001600160a01b038216337f9a2b201cb3043b4d299009f7ad0fb8125820088a7c5033fcb41fce87939aaf2d836108168682610834565b6040805192835260208301919091528051918290030190a350505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614156108ab576108a46001600160a01b0384167f0000000000000000000000000000000000000000000000000000000000000000846109a0565b508061099a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316141561093857610931837f0000000000000000000000000000000000000000000000000000000000000000847f0000000000000000000000000000000000000000000000000000000000000000610b03565b905061099a565b6001600160a01b03808416600090815260026020526040902054168061097b57507f00000000000000000000000000000000000000000000000000000000000000005b600061098985838630610b03565b90506109958282610834565b925050505b92915050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b178152925182516000946060949389169392918291908083835b60208310610a1d5780518252601f1990920191602091820191016109fe565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610a7f576040519150601f19603f3d011682016040523d82523d6000602084013e610a84565b606091505b5091509150818015610ab2575080511580610ab25750808060200190516020811015610aaf57600080fd5b50515b61042f576040805162461bcd60e51b815260206004820152601a60248201527f5361666545524332303a205472616e73666572206661696c6564000000000000604482015290519081900360640190fd5b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e6a4390587876040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b158015610b8457600080fd5b505afa158015610b98573d6000803e3d6000fd5b505050506040513d6020811015610bae57600080fd5b505190506001600160a01b038116610c0d576040805162461bcd60e51b815260206004820152601d60248201527f42657665726167654d616b65723a2043616e6e6f7420636f6e76657274000000604482015290519081900360640190fd5b600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015610c4957600080fd5b505afa158015610c5d573d6000803e3d6000fd5b505050506040513d6060811015610c7357600080fd5b5080516020909101516dffffffffffffffffffffffffffff91821693501690506000610ca1876103e5610e3f565b9050886001600160a01b0316886001600160a01b03161115610d7d57610cd381610ccd856103e8610e3f565b90610ea4565b610cdd8284610e3f565b81610ce457fe5b049450610cfb6001600160a01b038a1685896109a0565b6040805163022c0d9f60e01b8152600060048201819052602482018890526001600160a01b038981166044840152608060648401526084830182905292519287169263022c0d9f9260c480820193929182900301818387803b158015610d6057600080fd5b505af1158015610d74573d6000803e3d6000fd5b50505050610e33565b610d8d81610ccd846103e8610e3f565b610d978285610e3f565b81610d9e57fe5b049450610db56001600160a01b038a1685896109a0565b6040805163022c0d9f60e01b8152600481018790526000602482018190526001600160a01b038981166044840152608060648401526084830182905292519287169263022c0d9f9260c480820193929182900301818387803b158015610e1a57600080fd5b505af1158015610e2e573d6000803e3d6000fd5b505050505b50505050949350505050565b6000811580610e5a57505080820282828281610e5757fe5b04145b61099a576040805162461bcd60e51b8152602060048201526016602482015275536166654d6174683a204d756c204f766572666c6f7760501b604482015290519081900360640190fd5b8181018181101561099a576040805162461bcd60e51b8152602060048201526016602482015275536166654d6174683a20416464204f766572666c6f7760501b604482015290519081900360640190fdfea26469706673582212201621eddd874f3b5957056c4a42ed7eed2e4ddacc225a87504f8e6faeddd1a18c64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146101845780639d22ae8c146101a8578063bd1b820c146101d6578063e30c3978146102045761007d565b8063078dfbe714610082578063303e6aa4146100ba5780634e71e0c81461017c575b600080fd5b6100b86004803603606081101561009857600080fd5b506001600160a01b0381351690602081013515159060400135151561020c565b005b6100b8600480360360408110156100d057600080fd5b8101906020810181356401000000008111156100eb57600080fd5b8201836020820111156100fd57600080fd5b8035906020019184602083028401116401000000008311171561011f57600080fd5b91939092909160208101903564010000000081111561013d57600080fd5b82018360208201111561014f57600080fd5b8035906020019184602083028401116401000000008311171561017157600080fd5b509092509050610348565b6100b8610436565b61018c6104f8565b604080516001600160a01b039092168252519081900360200190f35b6100b8600480360360408110156101be57600080fd5b506001600160a01b0381358116916020013516610507565b6100b8600480360360408110156101ec57600080fd5b506001600160a01b0381358116916020013516610698565b61018c6106f0565b6000546001600160a01b0316331461026b576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b8115610327576001600160a01b0383161515806102855750805b6102ce576040805162461bcd60e51b81526020600482015260156024820152744f776e61626c653a207a65726f206164647265737360581b604482015290519081900360640190fd5b600080546040516001600160a01b03808716939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b038516179055610343565b600180546001600160a01b0319166001600160a01b0385161790555b505050565b333214610392576040805162461bcd60e51b81526020600482015260136024820152724d616b65723a204d7573742075736520454f4160681b604482015290519081900360640190fd5b8281146103dc576040805162461bcd60e51b815260206004820152601360248201527209aeae6e840c4ca40e6c2daca40d8cadccee8d606b1b604482015290519081900360640190fd5b60005b8181101561042f576104278585838181106103f657fe5b905060200201356001600160a01b031684848481811061041257fe5b905060200201356001600160a01b03166106ff565b6001016103df565b5050505050565b6001546001600160a01b0316338114610496576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b039092166001600160a01b0319928316179055600180549091169055565b6000546001600160a01b031681565b6000546001600160a01b03163314610566576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316141580156105da57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b80156105f85750806001600160a01b0316826001600160a01b031614155b610641576040805162461bcd60e51b81526020600482015260156024820152744d616b65723a20496e76616c69642062726964676560581b604482015290519081900360640190fd5b6001600160a01b0382811660008181526002602052604080822080546001600160a01b0319169486169485179055517f2e103aa707acc565f9a1547341914802b2bfe977fd79c595209f248ae4b006139190a35050565b3332146106e2576040805162461bcd60e51b81526020600482015260136024820152724d616b65723a204d7573742075736520454f4160681b604482015290519081900360640190fd5b6106ec82826106ff565b5050565b6001546001600160a01b031681565b816001600160a01b031663b969b4bf826040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b15801561074e57600080fd5b505af1158015610762573d6000803e3d6000fd5b5050604080516370a0823160e01b81523060048201529051849350600092506001600160a01b038416916370a08231916024808301926020929190829003018186803b1580156107b157600080fd5b505afa1580156107c5573d6000803e3d6000fd5b505050506040513d60208110156107db57600080fd5b505190506001600160a01b038216337f9a2b201cb3043b4d299009f7ad0fb8125820088a7c5033fcb41fce87939aaf2d836108168682610834565b6040805192835260208301919091528051918290030190a350505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614156108ab576108a46001600160a01b0384167f0000000000000000000000000000000000000000000000000000000000000000846109a0565b508061099a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316141561093857610931837f0000000000000000000000000000000000000000000000000000000000000000847f0000000000000000000000000000000000000000000000000000000000000000610b03565b905061099a565b6001600160a01b03808416600090815260026020526040902054168061097b57507f00000000000000000000000000000000000000000000000000000000000000005b600061098985838630610b03565b90506109958282610834565b925050505b92915050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b178152925182516000946060949389169392918291908083835b60208310610a1d5780518252601f1990920191602091820191016109fe565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610a7f576040519150601f19603f3d011682016040523d82523d6000602084013e610a84565b606091505b5091509150818015610ab2575080511580610ab25750808060200190516020811015610aaf57600080fd5b50515b61042f576040805162461bcd60e51b815260206004820152601a60248201527f5361666545524332303a205472616e73666572206661696c6564000000000000604482015290519081900360640190fd5b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e6a4390587876040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b158015610b8457600080fd5b505afa158015610b98573d6000803e3d6000fd5b505050506040513d6020811015610bae57600080fd5b505190506001600160a01b038116610c0d576040805162461bcd60e51b815260206004820152601d60248201527f42657665726167654d616b65723a2043616e6e6f7420636f6e76657274000000604482015290519081900360640190fd5b600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015610c4957600080fd5b505afa158015610c5d573d6000803e3d6000fd5b505050506040513d6060811015610c7357600080fd5b5080516020909101516dffffffffffffffffffffffffffff91821693501690506000610ca1876103e5610e3f565b9050886001600160a01b0316886001600160a01b03161115610d7d57610cd381610ccd856103e8610e3f565b90610ea4565b610cdd8284610e3f565b81610ce457fe5b049450610cfb6001600160a01b038a1685896109a0565b6040805163022c0d9f60e01b8152600060048201819052602482018890526001600160a01b038981166044840152608060648401526084830182905292519287169263022c0d9f9260c480820193929182900301818387803b158015610d6057600080fd5b505af1158015610d74573d6000803e3d6000fd5b50505050610e33565b610d8d81610ccd846103e8610e3f565b610d978285610e3f565b81610d9e57fe5b049450610db56001600160a01b038a1685896109a0565b6040805163022c0d9f60e01b8152600481018790526000602482018190526001600160a01b038981166044840152608060648401526084830182905292519287169263022c0d9f9260c480820193929182900301818387803b158015610e1a57600080fd5b505af1158015610e2e573d6000803e3d6000fd5b505050505b50505050949350505050565b6000811580610e5a57505080820282828281610e5757fe5b04145b61099a576040805162461bcd60e51b8152602060048201526016602482015275536166654d6174683a204d756c204f766572666c6f7760501b604482015290519081900360640190fd5b8181018181101561099a576040805162461bcd60e51b8152602060048201526016602482015275536166654d6174683a20416464204f766572666c6f7760501b604482015290519081900360640190fdfea26469706673582212201621eddd874f3b5957056c4a42ed7eed2e4ddacc225a87504f8e6faeddd1a18c64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 442,
        "contract": "contracts/BeverageMaker.sol:BeverageMaker",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 444,
        "contract": "contracts/BeverageMaker.sol:BeverageMaker",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 35,
        "contract": "contracts/BeverageMaker.sol:BeverageMaker",
        "label": "_bridges",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}